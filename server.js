const express = require("express"); const cors = require("cors"); const { v4: uuidv4 } = require("uuid"); const app = express(); const PORT = process.env.PORT || 3000; app.use(cors()); app.use(express.json({ limit: "50mb" })); const jobs = new Map(); app.get("/health", (req, res) => { res.json({ status: "ok", timestamp: new Date().toISOString(), message: "Montage Maker Backend is running" }); }); app.post("/api/generate-montage", async (req, res) => { try { const { videoUrls } = req.body; if (!videoUrls || videoUrls.length === 0) { return res.status(400).json({ error: "At least one video URL is required" }); } const jobId = uuidv4(); const job = { id: jobId, type: "montage", status: "queued", progress: 0, createdAt: new Date(), data: { videoUrls } }; jobs.set(jobId, job); setTimeout(() => { job.status = "processing"; job.progress = 50; jobs.set(jobId, job); setTimeout(() => { job.status = "completed"; job.progress = 100; job.completedAt = new Date(); jobs.set(jobId, job); }, 2000); }, 1000); res.json({ jobId, status: "queued" }); } catch (error) { console.error("Error in generate-montage:", error); res.status(500).json({ error: "Failed to start montage generation" }); } }); app.get("/api/job-status/:jobId", (req, res) => { const { jobId } = req.params; const job = jobs.get(jobId); if (!job) { return res.status(404).json({ error: "Job not found" }); } res.json(job); }); app.get("/", (req, res) => { res.json({ message: "Montage Maker Backend API", version: "1.0.0" }); }); app.listen(PORT, () => { console.log(`Server listening on port ${PORT}`); });
